[
  {
    "FileName": "ai-bp-sggestions-CPP.md",
    "HtmlContent": "\u003Cp\u003EAI-generated expressions for conditional breakpoints and tracepoints are now supported in C\u002B\u002B. GitHub Copilot analyzes your code and offers insightful breakpoint expressions, streamlining your debugging process.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/ai-bp-suggestionsCPP.png\u0022 alt=\u0022AI Breakpoint Suggestions CPP\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EWhen you position the cursor within the condition text for a conditional breakpoint/tracepoint in the breakpoint settings window, GitHub Copilot will promptly offer AI-generated expression suggestions based on your codebase. You have the flexibility to select the condition that best fits your requirements for placing the conditional breakpoint/tracepoint.\u003C/p\u003E\n",
    "Id": "ai-bp-sggestions-CPP"
  },
  {
    "FileName": "ai-rename-suggestions.md",
    "HtmlContent": "\u003Cp\u003EGitHub Copilot can now generate naming suggestions for your identifiers (variables, methods, or classes) based on how your identifier is being used and the style of your code.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/rename-suggestions.png\u0022 alt=\u0022Rename suggestions\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003ETo try it out, you\u0027ll need an active \u003Ca href=\u0022https://visualstudio.microsoft.com/github-copilot/\u0022\u003EGitHub Copilot subscription\u003C/a\u003E. Navigate to any variable you wish to rename, right-click -\u0026gt; \u003Cstrong\u003ERename\u003C/strong\u003E (Keyboard: \u003Ccode\u003ECtrl\u002BR\u003C/code\u003E, \u003Ccode\u003ECtrl\u002BR\u003C/code\u003E). You\u0027ll notice a GitHub Copilot sparkle icon that you can click or toggle to generate naming suggestions.\u003C/p\u003E\n\u003Cp\u003EThis feature is available for C#, C\u002B\u002B, and more languages.\u003C/p\u003E\n",
    "Id": "ai-rename-suggestions"
  },
  {
    "FileName": "ai-variable-lookup.md",
    "HtmlContent": "\u003Cp\u003EInspecting and analyzing values from Locals, Autos, and DataTips has never been easier with Ask GitHub Copilot in Visual Studio.\nSimply right-click on any value to get detailed AI-driven insights on errors, unexpected outcomes, or anomalies - all without ever leaving your IDE.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/ai-variable-lookup.png\u0022 alt=\u0022ai variable lookup\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EThis feature will significantly enhance your troubleshooting speed by analyzing variables in real-time within your IDE whenever unexpected values arise.\u003C/p\u003E\n",
    "Id": "ai-variable-lookup"
  },
  {
    "FileName": "copilot-content-exclusion.md",
    "HtmlContent": "\u003Cp\u003E\u003Ca href=\u0022https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/configuring-content-exclusions-for-github-copilot\u0022\u003EGitHub Copilot Content Exclusion\u003C/a\u003E is available for GitHub Copilot Business, and GitHub Copilot Enterprise customers to prevent specified files or repositories from being used to inform code completion suggestions made by GitHub Copilot.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/content-exclusion.png\u0022 alt=\u0022GitHub Copilot content exclusion\u0022 /\u003E\u003C/p\u003E\n\u003Ch3\u003EKeep your code secure\u003C/h3\u003E\n\u003Cp\u003EGitHub Copilot will now exclude the content of the affected files. This will be available for Completions, Inline, Chat, and all other GitHub Copilot experiences in Visual Studio.\u003C/p\u003E\n\u003Ch3\u003EConfigure Content Exclusions\u003C/h3\u003E\n\u003Cp\u003EFor repository administrators and organization owners, content exclusion will be configurable for files, folders, file types, and more. Learn more about \u003Ca href=\u0022https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-github-copilot-features-in-your-organization/configuring-content-exclusions-for-github-copilot\u0022\u003EConfiguring Content Exclusions for GitHub Copilot\u003C/a\u003E in the GitHub Copilot documentation.\u003C/p\u003E\n",
    "Id": "copilot-content-exclusion"
  },
  {
    "FileName": "copilot-inline-to-chat.md",
    "HtmlContent": "\u003Cp\u003EWith the integration of GitHub Copilot into Visual Studio, we are enhancing experiences across Completions and Chat. This enhancement aims to streamline your workflow, making it easier for you to refine Completions suggestions and transition conversations across different interfaces.\u003C/p\u003E\n\u003Ch3\u003ERefine for GitHub Copilot Completions with Inline chat\u003C/h3\u003E\n\u003Cp\u003EYou now have more control over the suggestions provided by GitHub Copilot. Instead of merely accepting or ignoring a suggestion, you can now retry! This feature allows you to modify and curate the proactive suggestions given by GitHub Copilot, by adding context or tweaking the completion.\u003C/p\u003E\n\u003Cp\u003EStart by modifying your Completions:\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/completions-to-inline.png\u0022 alt=\u0022GitHub Copilot Completions to Inline\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003ERefine your prompt with Inline Chat:\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/inline-refreshed.png\u0022 alt=\u0022GitHub Copilot Inline Chat refreshed\u0022 /\u003E\u003C/p\u003E\n\u003Ch3\u003EPromote Inline Chat to the Chat Window for more context\u003C/h3\u003E\n\u003Cp\u003EPreserve the history of your Inline Chat by promoting it to the Chat Window. This feature enables you to maintain a record of the conversation and continue the Chat Window at your convenience on a larger screen.\u003C/p\u003E\n\u003Cp\u003ESelect \u003Cstrong\u003EContinue in chat window...\u003C/strong\u003E\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/inline-to-chat.png\u0022 alt=\u0022Promote Inline Chat to the Chat Window\u0022 /\u003E\u003C/p\u003E\n",
    "Id": "copilot-inline-to-chat"
  },
  {
    "FileName": "copilot-is-getting-smarter.md",
    "HtmlContent": "\u003Cp\u003E\u003Ca href=\u0022https://docs.github.com/en/enterprise-cloud@latest/copilot/github-copilot-enterprise/overview/about-github-copilot-enterprise\u0022\u003EGitHub Copilot Enterprise\u003C/a\u003E subscribers in Visual Studio can now use GitHub Copilot Chat to get answers enriched with context from their entire repository and Bing search results.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/copilot-is-getting-smarter.png\u0022 alt=\u0022GitHub Copilot is getting smarter\u0022 /\u003E\u003C/p\u003E\n\u003Ch3\u003EGet answers from across your entire codebase\u003C/h3\u003E\n\u003Cp\u003EGitHub Copilot Chat can now answer questions with understanding of your full repository, not just the tabs you have open. \u003Ca href=\u0022https://docs.github.com/en/enterprise-cloud@latest/copilot/github-copilot-chat/copilot-chat-in-github/using-github-copilot-chat-in-githubcom#repo-indexing-note\u0022\u003EIndex your repository on GitHub.com\u003C/a\u003E, and then ask a question mentioning \u003Cstrong\u003E@github\u003C/strong\u003E. You can ask questions like \u003Cstrong\u003E@github where is rate limiting implemented?\u003C/strong\u003E\u003C/p\u003E\n\u003Ch3\u003ESearch with the context of the web\u003C/h3\u003E\n\u003Cp\u003EGitHub Copilot chat can also search Bing to find information outside of its general knowledge or your codebase. When you mention \u003Cstrong\u003E@github\u003C/strong\u003E, GitHub Copilot will intelligently decide when to use Bing. You can ask questions like \u003Cstrong\u003E@github what is the latest LTS version of Node.js?\u003C/strong\u003E\u003C/p\u003E\n\u003Cp\u003EBing search is only available if enabled by an administrator - for more details, see \u003Ca href=\u0022https://docs.github.com/en/enterprise-cloud@latest/copilot/github-copilot-enterprise/overview/enabling-github-copilot-enterprise-features\u0022\u003EEnabling GitHub Copilot Enterprise features\u003C/a\u003E or read \u003Ca href=\u0022https://docs.github.com/en/enterprise-cloud@latest/copilot/github-copilot-chat/copilot-chat-in-ides/about-github-copilot-chat-in-your-ide?tool=visualstudio\u0022\u003Ethe docs\u003C/a\u003E.\u003C/p\u003E\n",
    "Id": "copilot-is-getting-smarter"
  },
  {
    "FileName": "copilot-on-the-fly-documentation.md",
    "HtmlContent": "\u003Cp\u003EGitHub Copilot is now integrated into the tooltip on hover over symbols to provide AI-generated summaries of the selected symbol. This is available for both C# and C\u002B\u002B developers. This feature assists developers in understanding descriptions of various symbols at different invocations within their codebase. By hovering over a symbol and selecting the \u003Cstrong\u003ETell me more\u003C/strong\u003E option in the hover tooltip, GitHub Copilot can generate documentation for the selected symbol.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/OnTheFlyDocsCSharp.mp4\u0022 alt=\u0022On-the-fly documentation\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003ELeveraging LLMs, GitHub Copilot enhances existing or lacking code documentation by providing insightful explanations and context within hover tooltips.\u003C/p\u003E\n",
    "Id": "copilot-on-the-fly-documentation"
  },
  {
    "FileName": "copilot-symbols.md",
    "HtmlContent": "\u003Cp\u003EBy referring to methods, classes, and functions directly within the chat, you can provide specific context that helps GitHub Copilot better comprehend their code and the problem at hand. This feature empowers you to provide richer context to GitHub Copilot, enabling it to deliver more precise responses by gaining a deeper understanding of your codebase.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/copilot-symbols.png\u0022 alt=\u0022GitHub Copilot symbols\u0022 /\u003E\u003C/p\u003E\n\u003Ch3\u003EHow to refer to your symbols in GitHub Copilot Chat\u003C/h3\u003E\n\u003Cp\u003ETo refer to your symbols, simply use the \u003Ccode\u003E#\u003C/code\u003E symbol followed by the name of the method, class, or function you want to reference.\u003C/p\u003E\n\u003Ch3\u003ETry asking GitHub Copilot Chat\u003C/h3\u003E\n\u003Cp\u003ETry asking GitHub Copilot Chat questions like:\u003C/p\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Cem\u003EI have a test method named #methodName. How can I ensure that it\u0027s being executed correctly?\u003C/em\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Cem\u003ECould you help me understand the differences between the #methodName1 and #methodName2 functions?\u003C/em\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Cem\u003EWhere is the output of the #methodName function used in my code, and what purpose does it serve?\u003C/em\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Cem\u003E/explain #methodName\u003C/em\u003E\u003C/li\u003E\n\u003C/ol\u003E\n",
    "Id": "copilot-symbols"
  },
  {
    "FileName": "ai-editable-expression-IEnumerable-visualizer.md",
    "HtmlContent": "\u003Cp\u003EThe IEnumerable Visualizer now includes an \u003Cstrong\u003Einline Copilot chat\u003C/strong\u003E for its editable expression, enabling users to leverage copilot directly within the IEnumerable Visualizer to craft complex LINQ queries.\n\u003Cimg src=\u0022../media/editable-expression-inline-copilot.mp4\u0022 alt=\u0022Editable Expression Inline Copilot\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003ETo access the GitHub Copilot chat, simply click the GitHub Copilot icon located in the bottom right corner of the editable expression section. In the chat, you\u0027ll find sample LINQ syntax examples. Additionally, you can describe your query in natural language, and GitHub Copilot will generate the corresponding LINQ query. To apply LINQ query filtering to the visualizer, use the \u003Cstrong\u003EShow in Visualizer\u003C/strong\u003E button in the chat.\u003C/p\u003E\n\u003Cp\u003EIt provides instant feedback and guidance, making the process of creating complex filters and transformations more intuitive and efficient.\u003C/p\u003E\n",
    "Id": "ai-editable-expression-IEnumerable-visualizer"
  },
  {
    "FileName": "ai-variable-lookup.md",
    "HtmlContent": "\u003Cp\u003EInspecting and analyzing values from Locals, Autos, and DataTips has never been easier with Ask GitHub Copilot in Visual Studio.\nSimply right-click on any value to get detailed AI-driven insights on errors, unexpected outcomes, or anomalies - all without ever leaving your IDE.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/ai-variable-lookup.png\u0022 alt=\u0022ai variable lookup\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EThis feature will significantly enhance your troubleshooting speed by analyzing variables in real-time within your IDE whenever unexpected values arise.\u003C/p\u003E\n",
    "Id": "ai-variable-lookup"
  },
  {
    "FileName": "copilot-inbox.md",
    "HtmlContent": "\u003Cp\u003EYou are now able to sign in with your GitHub account during the first launch configuration dialog:\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/github-firstlaunch.png\u0022 alt=\u0022GitHub sign in from the VS first launch dialog\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EIf you decide to skip the first launch account setting, you can also sign in straight from the VS shell without the need to first add a Microsoft account.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/github-shell-signin.png\u0022 alt=\u0022GitHub sign in from the VS shell\u0022 /\u003E\u003C/p\u003E\n",
    "Id": "copilot-inbox"
  },
  {
    "FileName": "debug-tests-with-copilot.md",
    "HtmlContent": "\u003Cp\u003ENeed help debugging your failing unit tests. Now GitHub Copilot can help by providing you with a debug plan and guiding you through debugging the failed test to get you closer to passing by clicking on the \u003Cstrong\u003EDebug with Copilot\u003C/strong\u003E button in Test Explorer.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/debugTestsButton.png\u0022 alt=\u0022Debug with GitHub Copilot\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EOnce you launch the feature, GitHub Copilot will provide you with a debug plan, set appropriate breakpoints and watch variables and launch the debug session. When it hits the breakpoint, it provides GitHub Copilot with values for the watched variables and determines your next step, continue debugging or fix the problem code. You can continue with this conversation until you have a passing test.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/debugTestsChat.png\u0022 alt=\u0022GitHub Copilot Chat with debug plan and next steps\u0022 /\u003E\u003C/p\u003E\n",
    "Id": "debug-tests-with-copilot"
  },
  {
    "FileName": "fix-code-with-copilot.md",
    "HtmlContent": "\u003Cp\u003EGitHub Copilot is now integrated into the lightbulb and error list, providing you with quick fixes and insightful explanations for code issues. Whether you\u0027re developing in C# or C\u002B\u002B, this feature helps you understand and resolve problems in your codebase more efficiently.\u003C/p\u003E\n\u003Cp\u003ETo get started, simply invoke the lightbulb and select \u003Cstrong\u003EFix with Copilot\u003C/strong\u003E. This will launch an inline chat with GitHub Copilot, offering you an available fix.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/fix-with-copilot.png\u0022 alt=\u0022Fix code with GitHub Copilot from the lightbulb\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EYou can also select the GitHub Copilot icon from the error list to open the chat panel, where you\u0027ll find detailed explanations and solutions for the error at hand.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/fix-code-with-copilot-from-error-list.png\u0022 alt=\u0022Fix code with GitHub Copilot from the error list\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EBy leveraging LLMs, GitHub Copilot provides helpful explanations and fixes directly within the lightbulb and error list, enhancing your coding experience.\u003C/p\u003E\n",
    "Id": "fix-code-with-copilot"
  },
  {
    "FileName": "github-copilot-codereferencing.md",
    "HtmlContent": "\u003Cp\u003EWe\u0027re excited to announce that code referencing is now available in GitHub Copilot within Visual Studio!\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/codereferencing.png\u0022 alt=\u0022Example of public code being referenced\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EThis new capability provides transparency for developers by notifying them when GitHub Copilot suggestions match public code. You can now see the matching code, its source file, and any associated licensing information, helping them make more informed decisions while coding.\u003C/p\u003E\n\u003Cp\u003ECode referencing allows you to either block or allow suggestions containing public code matches, enhancing control and customization.\u003C/p\u003E\n\u003Cp\u003EBy integrating code referencing in GitHub Copilot, we\u0027re fostering knowledge sharing, enhancing transparency, and empowering you to create with confidence. Whether you\u0027re an individual developer or part of a larger team, this feature enhances your workflow and helps you navigate the complexities of public code with ease.\u003C/p\u003E\n\u003Cp\u003ETry out GitHub Copilot in Visual Studio today and take control of your development process with greater transparency and confidence!\u003C/p\u003E\n",
    "Id": "github-copilot-codereferencing"
  },
  {
    "FileName": "github-copilot-contentexclusion-submoduleandnestedrepos.md",
    "HtmlContent": "\u003Cp\u003EWe\u0027ve enhanced how our system handles submodules and nested repositories, making it easier for you to work with complex project structures.\u003C/p\u003E\n\u003Cp\u003EAdditionally, we have added support for non-Git repositories, expanding the flexibility of your workflow and allowing you to seamlessly integrate a wider range of projects.\u003C/p\u003E\n",
    "Id": "github-copilot-contentexclusion-submoduleandnestedrepos"
  },
  {
    "FileName": "github-copilot-gettingstarted.md",
    "HtmlContent": "\u003Cp\u003ENeed help getting started with GitHub Copilot Chat? We\u0027ve introduced two new onboarding features to help you get started faster.\u003C/p\u003E\n\u003Ch3\u003EStarter prompts\u003C/h3\u003E\n\u003Cp\u003ESend your first message to GitHub Copilot by clicking on one of the starter prompts! Use these prompts to see what capabilities GitHub Copilot has to offer to you in your workflow.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/starterprompts.png\u0022 alt=\u0022GitHub Copilot starter prompts\u0022 /\u003E\u003C/p\u003E\n\u003Ch3\u003EPrompt Library\u003C/h3\u003E\n\u003Cp\u003EIf you need to reference some pre-made prompts again, click on the \u003Cstrong\u003EPrompt Library\u003C/strong\u003E button (book icon) to see a list of all the prompts available to you. This library holds commonly used prompts, just a click away!\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/promptlibrary.png\u0022 alt=\u0022GitHub Copilot promptlibrary\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EWhether you\u0027re exploring new coding tasks or just looking for inspiration, our prompts are here to help you dive right in and start making the most of GitHub Copilot Chat.\u003C/p\u003E\n\u003Cp\u003EGive one a try and see where it takes you!\u003C/p\u003E\n",
    "Id": "github-copilot-gettingstarted"
  },
  {
    "FileName": "github-copilot-guidedchatexperience.md",
    "HtmlContent": "\u003Cp\u003EWe\u0027re introducing a new, more conversational way to interact with GitHub Copilot Chat!\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/guidedchat.png\u0022 alt=\u0022Guided chat experience example\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EWe\u0027ve introduced a more interactive and conversational way to use GitHub Copilot Chat. Now, instead of feeling stuck or unsure, GitHub Copilot will guide you with clarifying questions when context is unclear, ensuring more accurate and helpful responses.\u003C/p\u003E\n\u003Cp\u003EThis guided chat experience helps refine your queries, offers suggestions, and ensures smoother, more productive interactions. With this new chat modality, you\u0027ll enjoy a smarter, more intuitive GitHub Copilot that adapts to your needs as you code.\u003C/p\u003E\n\u003Cp\u003EGive the new guided chat experience a try today and see the difference for yourself!\u003C/p\u003E\n",
    "Id": "github-copilot-guidedchatexperience"
  },
  {
    "FileName": "github-copilot-model-selection.md",
    "HtmlContent": "\u003Cp\u003EOpenAI o1-preview and o1-mini are now available to all users in GitHub Copilot Chat in Visual Studio.\u003C/p\u003E\n\u003Cp\u003EYou can now try these models firsthand by using o1-preview, o1-mini, or the default GPT-4o model to power GitHub Copilot Chat. With model-switching available, you can seamlessly shift from explaining APIs or generating basic code to crafting intricate algorithms or debugging logic errors.\u003C/p\u003E\n\u003Cp\u003EVisit the \u003Ca href=\u0022https://github.blog/changelog/2024-10-29-openai-o1-is-now-available-in-github-copilot-chat-in-public-preview/\u0022\u003EGitHub Changelog\u003C/a\u003E to learn more about this feature.\u003C/p\u003E\n",
    "Id": "github-copilot-model-selection"
  },
  {
    "FileName": "github-copilot-new-github-skills.md",
    "HtmlContent": "\u003Cp\u003EYou can now use the GitHub Copilot Chat to search across GitHub to find commits, issues, pull requests, repositories, and topics.\u003C/p\u003E\n\u003Cp\u003EYou can ask questions like:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E@github What are all of the open PRs assigned to me?\u003C/li\u003E\n\u003Cli\u003E@github What are the latest issues assigned to me?\u003C/li\u003E\n\u003Cli\u003E@github When was the latest release?\u003C/li\u003E\n\u003Cli\u003E@github Show me the recent merged PRs from @davidfowl\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/github-copilot-new-skills.png\u0022 alt=\u0022New GitHub Skills\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EThis functionality is available to all GitHub Copilot users. Learn more about \u003Ca href=\u0022https://docs.github.com/en/copilot/using-github-copilot/asking-github-copilot-questions-in-your-ide#currently-available-skills\u0022\u003Eavailable GitHub Skills\u003C/a\u003E in the GitHub Copilot documentation.\u003C/p\u003E\n",
    "Id": "github-copilot-new-github-skills"
  },
  {
    "FileName": "github-copilot-repo-level-custominstructions.md",
    "HtmlContent": "\u003Cp\u003EWith GitHub Copilot, you can receive chat responses tailored to your team\u0027ss workflow, preferred tools, and project specifics - simply by providing context. Instead of adding this contextual detail to each chat query, you can create a file that supplies this information automatically. While this additional context won\u0027t appear in the chat, it is available to GitHub Copilot, allowing it to generate more accurate and relevant responses.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/ghcopilotcustominstructions.png\u0022 alt=\u0022GitHub Copilot Custom Instructions\u0022 /\u003E\u003C/p\u003E\n\u003Ch3\u003EHow to Enable Custom Instructions\u003C/h3\u003E\n\u003Col\u003E\n\u003Cli\u003EEnable the feature via \u003Cstrong\u003ETools \u0026gt; Options \u0026gt; GitHub \u0026gt; Copilot\u003C/strong\u003E \u0026gt; and check \u003Cem\u003E(Preview) Enable custom instructions to be loaded from .github/copilot-instructions.md files and added to requests\u003C/em\u003E.\u003C/li\u003E\n\u003Cli\u003EAdd \u003Cem\u003Ecopilot-instruction.md\u003C/em\u003E in the root of your respository inside the .github file, create the file if it doesn\u0027t already exist.\u003C/li\u003E\n\u003C/ol\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/ghcopilotcustominstructions_enable.png\u0022 alt=\u0022GitHub Copilot Enable Custom Instructions\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003ELearn more about creating custom instructions \u003Ca href=\u0022https://docs.github.com/en/enterprise-cloud@latest/copilot/customizing-copilot/adding-custom-instructions-for-github-copilot\u0022\u003Ehere\u003C/a\u003E\u003C/p\u003E\n",
    "Id": "github-copilot-repo-level-custominstructions"
  },
  {
    "FileName": "github-copilot-traits.md",
    "HtmlContent": "\u003Ch3\u003EEnhanced Contextual Understanding in GitHub Copilot\u003C/h3\u003E\n\u003Cp\u003EGitHub Copilot now offers enhanced contextual understanding to offer an even more precise responses. With this update, GitHub Copilot can intuitively interpret key characteristics in your code, tailoring suggestions to the unique needs of your project.\nThis smarter approach to code assistance is designed to help you work more efficiently, without the need for frequent context adjustments.\u003C/p\u003E\n\u003Cp\u003ETry it out with GitHub Copilot today!\u003C/p\u003E\n",
    "Id": "github-copilot-traits"
  },
  {
    "FileName": "improve-copilot-completions-for-csharp.md",
    "HtmlContent": "\u003Cp\u003EGitHub Copilot code completions provide autocomplete suggestions inline as you code. These suggestions are generated based on the content from your currently active file and any other open files in your editor. However, we have discovered that incorporating more relevant context significantly improves these suggestions.\u003C/p\u003E\n\u003Cp\u003ETo enhance the experience for C# developers, we\u0027ve updated GitHub Copilot to include additional C# context, such as available types and methods in completions.\u003C/p\u003E\n\u003Cp\u003EWith the latest version of Visual Studio, GitHub Copilot now automatically considers semantically relevant files for additional context, even if these files are not open in your editor. This improvement helps reduce hallucinations while offering more relevant and accurate suggestions.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EBefore\u003C/strong\u003E: Semantically relevant files are not considered as context for GitHub Copilot Completions\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/without-related-files.mp4\u0022 alt=\u0022Semantically relevant files are not considered as context for GitHub Copilot Completions\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EAfter\u003C/strong\u003E: Semantically relevant files are considered as context for GitHub Copilot Completions\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/with-related-files.mp4\u0022 alt=\u0022Semantically relevant files are considered as context for GitHub Copilot Completions\u0022 /\u003E\u003C/p\u003E\n",
    "Id": "improve-copilot-completions-for-csharp"
  },
  {
    "FileName": "attach-images-in-chat.md",
    "HtmlContent": "\u003Cp\u003EEver wanted to share an image with your AI pair programmer to help explain a concept or show an example? Now you can! With the new feature, you can attach images in GitHub Copilot chat to help you better communicate exactly what you need.\u003C/p\u003E\n\u003Ch3\u003EImportant Note\u003C/h3\u003E\n\u003Cp\u003EAs this feature is in preview, it may not be available to all users. Due to the gradual rollout, you may not see the option to attach images in chat immediately.\u003C/p\u003E\n\u003Ch3\u003EGet Started\u003C/h3\u003E\n\u003Cp\u003EAll you need to do is either paste an image from your clipboard or use the paperclip icon in the chat window to upload your image from file explorer. Then, simply add your prompt text and send! Copilot will then analyze the image and use it as additional context to generate a better response. This can be especially useful for tasks like ui development, where outlining a design or layout can be challenging with text alone. By attaching an image, you can help Copilot better understand your vision and generate more accurate code suggestions. It can also be useful when debugging, where you can share a screenshot of an error message or a code snippet to get more accurate suggestions.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/17.13-attach-images-in-chat.png\u0022 alt=\u0022Attach images in chat icon\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EThe accepted file types are PNG, JPG, and GIF (though, the model will only take a single frame of an animated gif), and you can attach up to 3 images per message. Additionally, several models support vision capabilities, including the GPT-4o model and Claude 3.5 Sonnet.\u003C/p\u003E\n",
    "Id": "attach-images-in-chat"
  },
  {
    "FileName": "code-referencing-for-completions.md",
    "HtmlContent": "\u003Cp\u003EWe\u0027re excited to announce that code referencing is now available in GitHub Copilot Completions within Visual Studio, a feature previously introduced in GitHub Copilot Chat!\u003C/p\u003E\n\u003Cp\u003EThis new functionality offers developers greater transparency on their code completions (or \u003Cem\u003Egray text\u003C/em\u003E) by providing detailed information on any public code matches found.\nWhen you accept a completion that matches code in a public GitHub repository for the first time in your solution, a toast notification will appear on the bottom right of your editor.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/code-referencing-popup.png\u0022 alt=\u0022Notification of Public Code Match\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EAll public code match details will be available in your GitHub Copilot Output Window, including the license type and a link to the GitHub.com, the public repository where the original code is located.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/code-referencing-output.png\u0022 alt=\u0022GitHub Copilot Output Window with Public Code Match Information\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003ENow, just like with GitHub Copilot Chat, you can code with more transparency and confidence using GitHub Copilot Completions!\u003C/p\u003E\n\u003Cp\u003EIf you are an individual subscriber and want to manage or learn more about the code referencing setting, see \u003Ca href=\u0022https://docs.github.com/en/copilot/managing-copilot/managing-copilot-as-an-individual-subscriber/managing-copilot-policies-as-an-individual-subscriber#enabling-or-disabling-suggestions-matching-public-code\u0022\u003Edocumentation\u003C/a\u003E\u003C/p\u003E\n",
    "Id": "code-referencing-for-completions"
  },
  {
    "FileName": "copilot-free-is-here.md",
    "HtmlContent": "\u003Cp\u003E\u003Cimg src=\u0022../media/copilot-free-banner.png\u0022 alt=\u0022GitHub Copilot Free is here\u0022 /\u003E\nI\u0027m your AI pair programmer \uD83C\uDF89\u003C/p\u003E\n\u003Ch3\u003EGitHub Copilot Free gives you:\u003C/h3\u003E\n\u003Cp\u003E\u2705 \u003Cstrong\u003E2,000 code completions\u003C/strong\u003E per month\u003Cbr /\u003E\n\u2705 \u003Cstrong\u003E50 chat messages\u003C/strong\u003E per month\u003C/p\u003E\n\u003Chr /\u003E\n\u003Cp\u003E\uD83D\uDCB8 No trial. No credit card required. Just your GitHub account.\u003C/p\u003E\n\u003Ch2\u003EUnlock the Power of GitHub Copilot\u003C/h2\u003E\n\u003Cp\u003EReady to elevate your coding experience? Sign up for \u003Ca href=\u0022vscmd://View.GitHub.Copilot.Chat\u0022\u003ECopilot Free\u003C/a\u003E   in the Chat Window now and enjoy the benefits:\u003C/p\u003E\n\u003Cp\u003E\uD83D\uDCA1 Get instant suggestions and completions to accelerate your development.\u003C/p\u003E\n\u003Cp\u003E\uD83D\uDEE0\uFE0F Use natural language prompts for AI-driven edits across multiple files directly in your editor.\u003C/p\u003E\n\u003Cp\u003E\uD83D\uDD0D Easily navigate and understand your projects with our intuitive chat feature.\u003C/p\u003E\n\u003Cp\u003EAll with tailored suggestions that match your coding style and project needs.\u003C/p\u003E\n\u003Chr /\u003E\n\u003Cp\u003E\u2728 Happy coding!\u003Cbr /\u003E\n\u003Cem\u003EThe GitHub Copilot and Visual Studio team\u003C/em\u003E\u003C/p\u003E\n",
    "Id": "copilot-free-is-here"
  },
  {
    "FileName": "copilot-functions.md",
    "HtmlContent": "\u003Cp\u003ECopilot Chat just got smarter! With Function Calling, you no longer need to manually specify the context for Copilot to understand your code. Now, Copilot automatically search for the relevant context, including:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EYour current file\u003C/li\u003E\n\u003Cli\u003EOpen or related files\u003C/li\u003E\n\u003Cli\u003EYour entire codebase\u003C/li\u003E\n\u003Cli\u003EDebugger data (locals, call stacks, exceptions etc.)\u003C/li\u003E\n\u003Cli\u003EVisual Studio tools\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003ESimply describe what you need in natural language, and Copilot retrieves relevant files and understands your project\u0027s nuances. It even considers language-specific details like project type and target frameworks for better suggestions.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/function-calling.png\u0022 alt=\u0022GitHub Copilot Function calling\u0022 /\u003E\u003C/p\u003E\n",
    "Id": "copilot-functions"
  },
  {
    "FileName": "ghcopilotedits.md",
    "HtmlContent": "\u003Cp\u003ECopilot in Visual Studio now helps you refine your code with Copilot Edits, a feature designed to make iteration across multiple files more efficient.\u003C/p\u003E\n\u003Cp\u003EStart by clicking the button to create an Edits thread at the top of the Copilot Chat panel.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/ghcpedits.png\u0022 alt=\u0022Copilot Edits Picture\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003ECopilot Edits combines the conversational flow of chat with an inline review experience to help developers:\u003C/p\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Cstrong\u003EPreview with clarity\u003C/strong\u003E: Copilot Edits starts with a summary of the files affected and the proposed changes, so you know exactly what\u0027s happening.\u003C/li\u003E\n\u003Cli\u003E\u003Cstrong\u003EReview with flow\u003C/strong\u003E: View code diffs inline, directly in your editor. Accept or reject individual changes using the \u003Ccode\u003ETAB\u003C/code\u003E or \u003Ccode\u003EAlt\u002BDel\u003C/code\u003E keys, or apply/dismiss all at once.\u003C/li\u003E\n\u003Cli\u003E\u003Cstrong\u003EIterate with confidence\u003C/strong\u003E: Checkpoints let you revisit earlier iterations of a code file or try a different approach whenever you need to\u2014perfect for when inspiration strikes again.\u003C/li\u003E\n\u003C/ol\u003E\n\u003Cp\u003EGet started by describing the changes you\u0027d like in natural language, and reference specific files, errors, or your solution using the # key, just as you already do in Copilot Chat.\u003C/p\u003E\n",
    "Id": "ghcopilotedits"
  },
  {
    "FileName": "github-copilot-keyboardshortcuts.md",
    "HtmlContent": "\u003Cp\u003EThis update registers new Commands for Copilot and binds them to keyboard shortcuts in the Chat window:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ENew thread: \u003Ccode\u003ECtrl\u002BN\u003C/code\u003E\u003C/li\u003E\n\u003Cli\u003EPrevious thread: \u003Ccode\u003ECtrl\u002BPgDown\u003C/code\u003E\u003C/li\u003E\n\u003Cli\u003ENext thread: \u003Ccode\u003ECtrl\u002BPgUp\u003C/code\u003E\u003C/li\u003E\n\u003Cli\u003EExpand and focus thread drop-down: \u003Ccode\u003ECtrl\u002BShift\u002BT\u003C/code\u003E\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003ENext/Previous thread will cycle around when the first/last item are passed.\u003C/p\u003E\n\u003Cp\u003EBecause these are registered as VS commands, they can be customized by users in the \u003Cstrong\u003EKeybinding\u003C/strong\u003E dialog.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003ENote\u003C/strong\u003E: These shortcuts will only work if your active focus is in the Copilot Chat pane. If you\u0027re working elsewhere, these shortcuts might have different functions.\u003C/p\u003E\n",
    "Id": "github-copilot-keyboardshortcuts"
  },
  {
    "FileName": "github-copilot-slashcommandexpansion.md",
    "HtmlContent": "\u003Cp\u003EUsers can now enjoy an enhanced slash command experience. Slash commands expand out into their natural language counterparts as the user types, including pulling in any active context they\u0027ll use and displaying that in the user\u0027s prompt before they send it.\u003C/p\u003E\n\u003Cp\u003EThis provides users with:\u003C/p\u003E\n\u003Col\u003E\n\u003Cli\u003EA better understanding of what will happen once they send their prompt\u003C/li\u003E\n\u003Cli\u003EAn understanding of what context the command can use\u003C/li\u003E\n\u003Cli\u003EThe ability to make modifications to the prompt before sending it\u003C/li\u003E\n\u003C/ol\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/ghcopilot_slashcommand1.png\u0022 alt=\u0022Slash command expansion picture\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EAfter the slash command expands:\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/ghcopilot_slashcommand2.png\u0022 alt=\u0022Slash command expansion picture 2\u0022 /\u003E\u003C/p\u003E\n",
    "Id": "github-copilot-slashcommandexpansion"
  },
  {
    "FileName": "adaptive-paste.md",
    "HtmlContent": "\u003Cp\u003EWhen you\u0027re pasting code into Visual Studio, there are often additional steps required to make it work seamlessly. Parameters may need to be adjusted to match those already used in your solution, or the syntax and styling may not align with the rest of your document.\u003C/p\u003E\n\u003Cp\u003EAdaptive paste is here to save you time and reduce effort by automatically adjusting the pasted code to fit the context of your existing code, minimizing the need for manual modifications. This feature also supports scenarios such as minor error fixes, code styling, formatting, human and code language translation, and fill-in-the-blank or continue-the-pattern tasks.\u003C/p\u003E\n\u003Cp\u003EFor instance, if you have a \u003Ccode\u003EMath\u003C/code\u003E class that implements the \u003Ccode\u003EIMath\u003C/code\u003E interface, copying and pasting the implementation for the \u003Ccode\u003ECeiling\u003C/code\u003E method into the same file will adapt it to implement the not yet implemented interface member \u003Ccode\u003EFloor\u003C/code\u003E.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/adaptive-paste-complete-interface.mp4\u0022 alt=\u0022Adapt pasted method to complete the interface\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EThe adaptive paste UI will appear when you perform a regular paste {KeyboardShortcut:Edit.Paste}. Simply press the \u003Ccode\u003ETAB\u003C/code\u003E key to request a suggestion, and you\u0027ll be shown a diff comparing the original pasted code with the adjusted code.\u003C/p\u003E\n\u003Cp\u003ETry it out today by enabling the option \u003Cstrong\u003ETools \u0026gt; Options \u0026gt; GitHub \u0026gt; Copilot \u0026gt; Editor \u0026gt; Enable Adaptive Paste\u003C/strong\u003E.\u003C/p\u003E\n",
    "Id": "adaptive-paste"
  },
  {
    "FileName": "agent-mode.md",
    "HtmlContent": "\u003Cp\u003EIt unlocks a new way to build with GitHub Copilot, going beyond single-turn prompts to handle entire tasks from start to finish.\u003C/p\u003E\n\u003Cp\u003ETo get started, open Copilot Chat, click the \u003Cstrong\u003EAsk\u003C/strong\u003E button, and switch to \u003Cstrong\u003EAgent\u003C/strong\u003E.\u003C/p\u003E\n\u003Ch3\u003EFrom Idea to Code\u003C/h3\u003E\n\u003Cp\u003EAgent Mode understands your intent, creates a plan, pulls in the right context, and takes action. It can fix bugs, edit files, and build your solution\u2014all from a single prompt until your goal is reached.\u003C/p\u003E\n\u003Cp\u003EWith MCP integration, Agent Mode can also pull in rich context from your connected systems\u2014like GitHub, CI pipelines, or monitoring dashboards\u2014to take even smarter actions.\u003C/p\u003E\n\u003Cp\u003ETry it out and see what improvements it can offer!\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/agent-mode.png\u0022 alt=\u0022Agent Mode\u0022 /\u003E\u003C/p\u003E\n",
    "Id": "agent-mode"
  },
  {
    "FileName": "ai-doc-comments.md",
    "HtmlContent": "\u003Cp\u003ECopilot is now seamlessly integrated into Visual Studio\u0027s code editor to significantly boost your productivity by generating doc comments for your functions.\u003C/p\u003E\n\u003Cp\u003EWith automatic doc comment generation enabled for your project, you can simply type the comment pattern according to your settings configuration (e.g., \u003Ccode\u003E///\u003C/code\u003E), and Copilot will instantly complete the function description based on the function\u0027s content. This feature saves you valuable time and effort, allowing you to focus more on coding and less on documentation.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/ai-doc-comments-2.mp4\u0022 alt=\u0022AI doc comments\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EThis game-changing feature is available for both C\u002B\u002B and C# project files, making your coding experience smoother and more efficient.\u003C/p\u003E\n",
    "Id": "ai-doc-comments"
  },
  {
    "FileName": "claude_model.md",
    "HtmlContent": "\u003Cp\u003EWe\u0027re excited to announce that Claude Sonnet 4 and Claude Opus 4 are now generally available to all Visual Studio customers!\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EUse Claude Sonnet 4 in \u003Cem\u003EAgent Mode\u003C/em\u003E for faster, more focused interactions.\u003C/li\u003E\n\u003Cli\u003ETry both Claude Sonnet 4 and Opus 4 in \u003Cem\u003EAsk Mode\u003C/em\u003E for deeper reasoning.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003ETo get started, open Chat in Visual Studio, select the model picker, and choose the Claude model that fits your workflow.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/claude_four.png\u0022 alt=\u0022New Model\u0022 /\u003E\u003C/p\u003E\n",
    "Id": "claude_model"
  },
  {
    "FileName": "completion-model-picker.md",
    "HtmlContent": "\u003Cp\u003EWe are thrilled to announce that the new GPT-4o Copilot code completion model is now available in Visual Studio 17.14 for GitHub Copilot users! This advanced model, based on GPT-4o mini, has been further trained on over 275,000 high-quality public repositories across more than 30 popular programming languages. As a result, developers can look forward to more accurate suggestions and enhanced performance.\u003C/p\u003E\n\u003Cp\u003EGPT-4o Copilot access notes:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003ECopilot Pro, Business, or Enterprise users\u003C/strong\u003E: The new model is available for you now in 17.14 and later.\u003C/li\u003E\n\u003Cli\u003E\u003Cstrong\u003ECopilot Free users\u003C/strong\u003E: Using this model will count toward your 2,000 free monthly completions.\u003C/li\u003E\n\u003C/ul\u003E\n",
    "Id": "completion-model-picker"
  },
  {
    "FileName": "completions-on-demand.md",
    "HtmlContent": "\u003Cp\u003EWant to be more in control of code suggestions that pop up in your editor? Now in Visual Studio, you can opt out of automatic code suggestions and only receive suggestions when you explicitly request them.\u003C/p\u003E\n\u003Cp\u003EYou can configure the trigger for code suggestions in \u003Cstrong\u003ETools \u0026gt; Options \u0026gt; IntelliCode \u0026gt; General\u003C/strong\u003E. The default experience is \u003Cstrong\u003EAutomatically generate code completions in the Editor\u003C/strong\u003E and you can uncheck this setting to only receive suggestions when you explicitly request them by pressing \u003Ccode\u003EAlt \u002B ,\u003C/code\u003E or \u003Ccode\u003EAlt \u002B .\u003C/code\u003E. If there are multiple code suggestions available after requesting, you can cycle through them by pressing \u003Ccode\u003EAlt \u002B ,\u003C/code\u003E and \u003Ccode\u003EAlt \u002B .\u003C/code\u003E as well.\u003C/p\u003E\n\u003Cp\u003EWhen triggered, a thinking hint bar will appear at your cursor position to indicate that Copilot is generating code suggestions. If no suggestions returned, the hint bar will disappear after a few seconds. If suggestions are available, you can accept them by pressing \u003Ccode\u003ETab\u003C/code\u003E.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/completions-on-demand.mp4\u0022 alt=\u0022Code Completions Manually Triggered\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003ENow, you can better customize your code suggestion experience in Visual Studio with this new setting. For example, when you want to be focused with minimum distraction, you can uncheck this setting and change it back when you want to receive more suggestions effortlessly. Please share any feedback with us, and let us know any other ways you want to customize your Copilot code suggestions experience!\u003C/p\u003E\n",
    "Id": "completions-on-demand"
  },
  {
    "FileName": "context-updates.md",
    "HtmlContent": "\u003Cp\u003ECopilot Chat keeps getting smarter with improved context for your everyday tasks. You can expect better overall responses since the core code search capabilities have been enhanced to provide more relevant results. Now, Copilot is even better at retrieving the right code snippets related to behaviors, concepts, or functionality described in natural language. These improvements are thanks to leveraging remote indexes of your codebases.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/18.0_semantic_search.png\u0022 alt=\u0022\u0022 /\u003E\u003C/p\u003E\n",
    "Id": "context-updates"
  },
  {
    "FileName": "copilot-billing.md",
    "HtmlContent": "\u003Cp\u003EWant to know how much you\u0027ve used Copilot this month? Visual Studio now includes a \u003Cstrong\u003ECopilot Consumptions\u003C/strong\u003E panel to easily track your usage!\u003C/p\u003E\n\u003Cp\u003EWhether you\u0027re using Copilot Free or a paid plan, you can check your number of chat requests and code completions right from the IDE.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/copilot-billing.png\u0022 alt=\u0022Usage Status\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EAccess it by clicking the \u003Cstrong\u003ECopilot badge\u003C/strong\u003E in the top-right corner of your IDE and selecting \u003Cstrong\u003ECopilot Consumptions\u003C/strong\u003E.\u003C/p\u003E\n\u003Cp\u003EThis opens a panel showing your current usage for the month.\u003C/p\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003ETip: If you\u0027re using premium models, you\u0027ll also see usage multipliers listed in the model picker, so you always know exactly what you\u0027re using.\u003C/p\u003E\n\u003C/blockquote\u003E\n",
    "Id": "copilot-billing"
  },
  {
    "FileName": "copilot-google-sign-up.md",
    "HtmlContent": "\u003Cp\u003ENew to Copilot? You can now sign up for Copilot using your Google account!\u003C/p\u003E\n\u003Cp\u003EGitHub now supports social login with Google, and you can link your new account right from Visual Studio.\u003C/p\u003E\n\u003Cp\u003EClick the \u003Cstrong\u003ESign up with Google\u003C/strong\u003E button from the Copilot Chat window to streamline your Copilot set up with your Google account!\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/copilot-google-sign-up.png\u0022 alt=\u0022Copilot Chat window\u0022 /\u003E\u003C/p\u003E\n",
    "Id": "copilot-google-sign-up"
  },
  {
    "FileName": "cpp-completions-improvements.md",
    "HtmlContent": "\u003Cp\u003EWe have been working to improve the quality of C\u002B\u002B GitHub Copilot completions.\u003C/p\u003E\n\u003Cp\u003ENow, Copilot can detect even more relevant context in C\u002B\u002B projects in order to provide more accurate code suggestions in Visual Studio for your specific codebase.\u003C/p\u003E\n",
    "Id": "cpp-completions-improvements"
  },
  {
    "FileName": "did-you-mean.md",
    "HtmlContent": "\u003Cp\u003EEver forget the name of a file while coding? The new \u003Cstrong\u003EDid You Mean\u003C/strong\u003E feature in Visual Studio, powered by Copilot, is here to help. When you search using All-In-One Search and Copilot detects a better match than the top result - perhaps because of a typo or a fuzzy memory - it will suggest what you might have meant.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/DidYouMeanVideo.mp4\u0022 alt=\u0022Did You Mean in action\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EDid You Mean\u003C/strong\u003E works seamlessly with the All-In-One Search, which you can access by pressing \u003Ccode\u003ECtrl\u002BShift\u002BP\u003C/code\u003E. When you type in a search term, Copilot will analyze your input and suggest a more relevant term if it finds one that closely matches your intent. This feature can support you whether the search results are empty or when the top result is not what you intended.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/DidYouMeanEmpty.png\u0022 alt=\u0022Did You Mean with empty result\u0022 /\u003E\n\u003Cimg src=\u0022../media/DidYouMeanNonEmpty.png\u0022 alt=\u0022Did You Mean with irrelevant result\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EDid You Mean\u003C/strong\u003E speeds up your search experience by reducing the time spent correcting typos or trying to remember the correct name, making your search experience easier and more intuitive.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EDid You Mean (preview)\u003C/strong\u003E is now available in Visual Studio and automatically enabled for all applicable users. Currently, this feature works with public GitHub repositories, and we are actively working to expand its reach in future updates. Give it a try today and let us know what you think! You can also change the option in \u003Cstrong\u003ETools \u0026gt; Options \u0026gt; GitHub \u0026gt; Copilot \u0026gt; Search \u0026gt; Enable \u0027Did You Mean\u0027 Code Search Support in All-In-One Search (preview)\u003C/strong\u003E.\u003C/p\u003E\n",
    "Id": "did-you-mean"
  },
  {
    "FileName": "ghcopilot-walkthroughs.md",
    "HtmlContent": "\u003Cp\u003EWe\u0027re excited to introduce the GitHub Copilot Walkthrough in Visual Studio! The Walkthrough is an interactive guide built right into your editor, helping you explore GitHub Copilot\u0027s capabilities step-by-step. Whether you\u0027re new to GitHub Copilot or want to learn about its latest features, the walkthrough makes it easier than ever to get started.\u003C/p\u003E\n\u003Ch3\u003EGetting Started with Walkthroughs\u003C/h3\u003E\n\u003Cp\u003EYou can launch Copilot Walkthroughs directly from Visual Studio by going to \u003Cstrong\u003ECopilot button (upper right) \u0026gt; GitHub Copilot Walkthrough\u003C/strong\u003E.\u003C/p\u003E\n\u003Cp\u003EOnce opened, you\u0027ll see guided activities that introduce you to different parts of the Copilot experience, such as:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cp\u003EWriting prompts in Chat\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003EUsing inline code completions\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003EAccepting, editing, or rejecting Copilot suggestions\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003EExploring and learning about new features like Copilot Edits\u003C/p\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EThe walkthrough is a great way to get a high-level understanding of what Copilot can do before diving deeper into the documentation and hands-on usage!\u003C/p\u003E\n\u003Ch3\u003EHow to Access Walkthroughs\u003C/h3\u003E\n\u003Cp\u003EThe GitHub Copilot walkthrough automatically opens the first time you sign into GitHub Copilot, making it super easy to get started! If you want to revisit it later, simply go to GitHub Copilot \u0026gt; GitHub Copilot Walkthrough in Visual Studio.\u003C/p\u003E\n\u003Cp\u003EWhether you\u0027re exploring GitHub Copilot for the first time or just need a quick refresher, this walkthrough is your friendly guide to unlocking the full potential of Copilot. Dive in and start creating with confidence!\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/walkthroughsvideo.mp4\u0022 alt=\u0022Walkthrough\u0022 /\u003E\u003C/p\u003E\n",
    "Id": "ghcopilot-walkthroughs"
  },
  {
    "FileName": "implement-with-copilot.md",
    "HtmlContent": "\u003Cp\u003EToday, if you\u0027re referencing a method in your C# code that hasn\u0027t been implemented yet, you can use a common lightbulb refactoring called \u003Cstrong\u003EGenerate Method\u003C/strong\u003E to immediately create that method in a class. However, this refactoring only creates a method with the correct signature but an empty skeleton and \u003Ccode\u003Ethrow new NotImplementedException\u003C/code\u003E line otherwise. This means that while the method technically exists and you have to do less work to create it, you\u0027ll still need to implement the method yourself, which can take more time.\u003C/p\u003E\n\u003Cp\u003EThe \u003Cstrong\u003EImplement with Copilot\u003C/strong\u003E refactoring aims to make you even more productive in this scenario by allowing you to automatically implement or \u003Cem\u003Eadd the meat\u003C/em\u003E to your method with the help of GitHub Copilot. When an empty method only containing a \u003Ccode\u003ENotImplementedException\u003C/code\u003E throw is encountered, you can select the lightbulb (\u003Ccode\u003ECTRL\u002B.\u003C/code\u003E) on that \u003Ccode\u003Ethrow\u003C/code\u003E line and select the \u003Cstrong\u003EImplement with Copilot\u003C/strong\u003E refactoring and Copilot will fill out all the contents of your method based on your existing codebase, method name, etc.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/implement-with-copilot.mp4\u0022 alt=\u0022Implement with Copilot\u0022 /\u003E\u003C/p\u003E\n",
    "Id": "implement-with-copilot"
  },
  {
    "FileName": "mcp-server-improved.md",
    "HtmlContent": "\u003Cp\u003EWe\u0027ve made significant improvements to MCP server integration in Visual Studio to help you unlock a more powerful, connected engineering stack.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/mcp-tool-config.png\u0022 alt=\u0022MCP server support improved\u0022 /\u003E\u003C/p\u003E\n\u003Ch3\u003ESet Up Your MCP Server\u003C/h3\u003E\n\u003Cp\u003EAdd an \u003Ccode\u003Emcp.json\u003C/code\u003E file to your solution \u2014 Visual Studio will detect it automatically (we also support \u003Ccode\u003E.vscode/mcp.json\u003C/code\u003E). Start and manage servers directly with CodeLens controls at the top of each server block. Easily restart, run, and control inputs from within the editor.\u003C/p\u003E\n\u003Cp\u003EWith seamless authentication via keychain support, you can now authenticate with supported MCP servers directly in Visual Studio using your existing keychain credentials \u2014 no additional configuration needed.\u003C/p\u003E\n\u003Ch3\u003EUse Your MCP Servers\u003C/h3\u003E\n\u003Cp\u003EOpen the \u003Cstrong\u003ETools\u003C/strong\u003E dropdown in the Copilot Chat panel to view connected MCP servers and manage them by selecting the arrow to reveal the new menu. From there, you can manage server inputs in our new modal dialog. Copilot can then pull in context and take action using your existing systems.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003ENote:\u003C/strong\u003E You will need to be in \u003Cem\u003EAgent Mode\u003C/em\u003E to access and interact with MCP servers.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/mcp-configuration.png\u0022 alt=\u0022MCP\u0022 /\u003E\u003C/p\u003E\n\u003Ch3\u003EVisual Studio now supports the new Authentication protocol for MCP servers\u003C/h3\u003E\n\u003Cp\u003EWith seamless authentication via keychain support, you can now authenticate with supported remote MCP servers directly in Visual Studio using your existing keychain credentials \u2014 no additional configuration needed. This is currently supported for GitHub and Entra ID accounts, with support for additional OAuth providers coming in a later update.\u003C/p\u003E\n\u003Ch3\u003ECodelens support for MCP servers\u003C/h3\u003E\n\u003Cp\u003EVisual Studio now supports CodeLens for MCP servers, allowing you to start and manage servers inputs and authentication directly from the editor. This makes it easier to control your development environment without leaving your code.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/mcp-codelens.png\u0022 alt=\u0022MCP Codelens support\u0022 /\u003E\u003C/p\u003E\n\u003Chr /\u003E\n\u003Cp\u003EBring the full power of your stack into Copilot without leaving Visual Studio!\u003C/p\u003E\n",
    "Id": "mcp-server-improved"
  },
  {
    "FileName": "mcp-server-support.md",
    "HtmlContent": "\u003Cp\u003EVisual Studio now supports MCP servers, unlocking smarter and more connected AI development. MCP is an open protocol that standardizes how apps and AI agents share context and take action.\u003C/p\u003E\n\u003Cp\u003EWith MCP in Visual Studio, you can do more than just retrieve information from your MCP servers, such as logs, test failures, PRs, or issues. You can also use that information to drive \u003Cstrong\u003Emeaningful actions\u003C/strong\u003E in your code, your IDE, and even your connected systems across your stack.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/mcp-support.png\u0022 alt=\u0022MCP server support\u0022 /\u003E\u003C/p\u003E\n\u003Ch3\u003ESet Up Your MCP Server\u003C/h3\u003E\n\u003Cp\u003EAdd an \u003Ccode\u003Emcp.json\u003C/code\u003E file to your solution, and Visual Studio will detect it automatically. It also recognizes configs from other environments like \u003Ccode\u003E.vscode/mcp.json\u003C/code\u003E.\u003C/p\u003E\n\u003Ch3\u003EUse Your MCP Servers\u003C/h3\u003E\n\u003Cp\u003EOpen the \u003Cstrong\u003ETools\u003C/strong\u003E dropdown in the Copilot Chat panel to view connected MCP servers. From there, Copilot can pull in context and take action using your existing systems.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003ENote:\u003C/strong\u003E You will need to be in \u003Cem\u003EAgent Mode\u003C/em\u003E to access and interact with MCP servers.\u003C/p\u003E\n\u003Chr /\u003E\n\u003Cp\u003EBring the full power of your stack into Copilot without leaving Visual Studio!\u003C/p\u003E\n",
    "Id": "mcp-server-support"
  },
  {
    "FileName": "nes-collapsed.md",
    "HtmlContent": "\u003Cp\u003EWant to be focused when coding and not seeing next edit suggestions (NES) popping up automatically? We hear you that sometimes Copilot suggestions can be a bit distracting when appearing unexpectedly, and now in Visual Studio you can hide NES by default and only review them when you want to.\u003C/p\u003E\n\u003Cp\u003ENES will still be triggered based on your edits and when there is an available NES ready for you to review, a \u003Cstrong\u003Emargin indicator\u003C/strong\u003E will pop up in the gutter space, pointing at the line that it has a suggestion for. To view this suggestion, you can either:\u003C/p\u003E\n\u003Col\u003E\n\u003Cli\u003Eclick the margin indicator or\u003C/li\u003E\n\u003Cli\u003EPress \u003Ccode\u003ETab\u003C/code\u003E key\u003C/li\u003E\n\u003C/ol\u003E\n\u003Cp\u003Eand the suggestion will be displayed. Then, after viewing the suggestions, you can press \u003Ccode\u003ETab\u003C/code\u003E again to accept it or press \u003Ccode\u003EEsc\u003C/code\u003E to reject it. After you accept a suggestion, any related suggestions will automatically appear again, as you might find them useful too. Any other new suggestions that are not related to your previously accepted suggestion will be hidden again.\u003C/p\u003E\n\u003Cp\u003EFor example, in the video below, after changing \u003Ccode\u003EPoint\u003C/code\u003E to \u003Ccode\u003EPoint3D\u003C/code\u003E, a NES is available but not displayed directly. The margin indicator and hint bar shows that there is a suggestion on line 4 and then I clicked on the indicator to review it.\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\u0022../media/NEScollapsemode.mp4\u0022\u003EHiding Next Edit Suggestions\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003ETo try out this experience, go to Tools \u0026gt; Options \u0026gt; GitHub \u0026gt; Copilot \u0026gt; Copilot Completions and check \u003Cstrong\u003ECollapse Next Edit Suggestions\u003C/strong\u003E.\u003C/p\u003E\n\u003Cp\u003EYou can also configure it via the shortcut provided by the context menu in the margin indicator. Whenever there is a code suggestion ready for you in the Editor (no matter it\u0027s from Copilot or IntelliCode), a margin indicator will pop up and point at the corresponding line. When clicking on the indicator, a context menu will appear, giving you multiple ways to interact with the code suggestion:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EAccept (click or Press \u003Ccode\u003ETab\u003C/code\u003E)\u003C/li\u003E\n\u003Cli\u003EReject (click or Press \u003Ccode\u003EReject\u003C/code\u003E)\u003C/li\u003E\n\u003Cli\u003ESettings: You can open the GitHub Copilot Completions settings page directly from here.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/contextMenu.png\u0022 alt=\u0022Gutter Menu\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EPlease let us know in Developer Community if you have any feedback!\u003C/p\u003E\n",
    "Id": "nes-collapsed"
  },
  {
    "FileName": "new-models.md",
    "HtmlContent": "\u003Cp\u003EMore power, speed, and flexibility \u2014 all within your IDE!\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/new-models.png\u0022 alt=\u0022New Models\u0022 /\u003E\u003C/p\u003E\n\u003Ch3\u003E\uD83D\uDEA8 Gemini 2.5 Pro is now in Visual Studio\u003C/h3\u003E\n\u003Cp\u003EGemini 2.5 Pro, widely regarded as one of the top-performing models available, is now supported in Visual Studio. It joins GPT-4.1, GPT-4o, Claude Sonnet 3.7, Claude Sonnet 3.5, and o3 mini to bring a truly versatile multi-model AI experience to your IDE.\u003C/p\u003E\n\u003Ch3\u003E\uD83D\uDEA8 GPT-4.1 is now the default\u003C/h3\u003E\n\u003Cp\u003EGPT-4.1 is now the default model in Visual Studio, offering a faster, more responsive, and noticeably smoother experience across the board.\u003C/p\u003E\n\u003Chr /\u003E\n\u003Cp\u003EYou can now select the best model for the task, code, and workflow at hand. Try them out and let us know what you think!\u003C/p\u003E\n",
    "Id": "new-models"
  },
  {
    "FileName": "next-edit-suggestion.md",
    "HtmlContent": "\u003Cp\u003EWe are excited to announce Next Edit Suggestions, or NES for short, is now available in Visual Studio to further improve your coding experience. NES leverages the previous edits made and predicts the next edit to come, whether it\u0027s an insertion, deletion, or mix of both. Unlike Completions which is limited to generate suggestions at your caret location, NES can support you anywhere in your file, where the next edit is most likely to occur. NES augments the existing Copilot Completions experience by supporting developers\u0027 code editing activities.\u003C/p\u003E\n\u003Ch3\u003EGetting Started with NES\u003C/h3\u003E\n\u003Cp\u003EEnable NES via \u003Cstrong\u003ETools \u0026gt; Options \u0026gt; GitHub \u0026gt; Copilot \u0026gt; Copilot Completions \u0026gt; Enable Next Edit Suggestions.\u003C/strong\u003E\u003C/p\u003E\n\u003Cp\u003ELike completions, all you need to do to get NES is to start coding!\u003C/p\u003E\n\u003Cp\u003EWhen you\u0027re presented with an edit suggestion, if it is on a different line than the one you are on now, it will suggest you \u003Cstrong\u003ETab to Navigate to the corresponding line\u003C/strong\u003E first. You won\u0027t need to manually search for related edits anymore; NES will lead the way!\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/NES-Tab-Jump.png\u0022 alt=\u0022NES Tab to Jump Hint Bar\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EAfter you are on the same line as the edit, you can \u003Cstrong\u003ETab to Accept\u003C/strong\u003E the suggestion.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/NES-Tab-Accept.png\u0022 alt=\u0022NES Tab to Accept Hint Bar\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003ENote: You can turn on/off the hint bars by going to \u003Cstrong\u003ETools \u0026gt; Options \u0026gt; IntelliCode \u0026gt; Advanced \u0026gt; Hide the tip shown with gray text\u003C/strong\u003E.\u003C/p\u003E\n\u003Cp\u003EIn addition to the hint bars, an arrow in the gutter also pops up to indicate that there is an edit suggestion available. You can click on the arrow to explore the edit suggestion menu.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/NES-Gutter-Arrow.png\u0022 alt=\u0022NES Gutter Arrow\u0022 /\u003E\u003C/p\u003E\n\u003Ch3\u003EExample Scenarios\u003C/h3\u003E\n\u003Cp\u003ENext edit suggestions can be helpful in a variety of scenarios, not only making obvious repetitive changes but also logical changes. Here are some examples:\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003ERefactoring a 2D Point class to 3D Point:\u003C/strong\u003E\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/NES-Point.mp4\u0022 alt=\u0022NES Refactoring Point Class\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EUpdating code syntax to modern C\u002B\u002B using STL:\u003C/strong\u003E\u003C/p\u003E\n\u003Cp\u003ENote that NES is not just making repetitive changes like updating all \u003Ccode\u003Eprintf()\u003C/code\u003E to \u003Ccode\u003Estd::cout\u003C/code\u003E, but also updating other syntax such as \u003Ccode\u003Efgets()\u003C/code\u003E.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/NES-Migration.mp4\u0022 alt=\u0022NES Updating C\u002B\u002B Syntax\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EMaking logical changes in response to a newly added variable:\u003C/strong\u003E\u003C/p\u003E\n\u003Cp\u003ENES responds quickly to the new variable, which adds a maximum number of guesses a player can make in a game, and Copilot Completions also jumps in to help.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/NES-AddVariable.mp4\u0022 alt=\u0022NES Add New Variable\u0022 /\u003E\u003C/p\u003E\n",
    "Id": "next-edit-suggestion"
  },
  {
    "FileName": "output-window.md",
    "HtmlContent": "\u003Cp\u003EWe know the Output Window is essential for tracking builds, debugging, and understanding what is going on under the hood. Now, Copilot can read that information - so you can ask questions, get help, and take action based on your output logs.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/output-window.png\u0022 alt=\u0022Output Window\u0022 /\u003E\u003C/p\u003E\n\u003Ch3\u003EHow to Use It\u003C/h3\u003E\n\u003Cul\u003E\n\u003Cli\u003EUse \u003Ccode\u003E#output\u003C/code\u003E to reference it directly in chat.\u003C/li\u003E\n\u003Cli\u003EClick the \u2795 icon in the chat input to add it as context.\u003C/li\u003E\n\u003Cli\u003EAsk Copilot directly: \u003Cem\u003ECheck my output logs and help me fix this error.\u003C/em\u003E\u003C/li\u003E\n\u003Cli\u003EOr right-click in the \u003Cstrong\u003EOutput Window\u003C/strong\u003E and choose \u003Cstrong\u003EExplain with Copilot\u003C/strong\u003E to attach it instantly.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003ETry it out and see how much easier it is to read and act on your logs!\u003C/p\u003E\n",
    "Id": "output-window"
  },
  {
    "FileName": "partial-accept.md",
    "HtmlContent": "\u003Cp\u003EWhen receiving a Copilot code completions in the editor, have you ever wanted to only accept the first couple words or lines from it instead of accepting the whole thing? We are excited to announce that starting Visual Studio 17.14.12, you will be able to partially accept a completion word by word or line by line!\u003C/p\u003E\n\u003Cp\u003ETo accept one word at a time, use the shortcut \u003Ccode\u003ECtrl\u003C/code\u003E \u002B \u003Ccode\u003ERight Arrow\u003C/code\u003E. To accept one line at a time, use the shortcut \u003Ccode\u003ECtrl\u003C/code\u003E \u002B \u003Ccode\u003EDown Arrow\u003C/code\u003E. Now you will have more fine grained control over how much completions you would like to accept instead of having to accept the entire suggestions and edit afterwards.\u003C/p\u003E\n",
    "Id": "partial-accept"
  },
  {
    "FileName": "prompt-files.md",
    "HtmlContent": "\u003Cp\u003EWriting effective prompts can be time consuming, but it\u0027s the key to getting the most out of Copilot Ask and Agent mode. We\u0027ve enabled reusable prompt files to allow you to leverage these great prompts again and again. From there, you can run quickly from the chat window or share with your team.\u003C/p\u003E\n\u003Ch3\u003EHow to Write Prompt Files\u003C/h3\u003E\n\u003Col\u003E\n\u003Cli\u003EWrite your prompts the way you normally would in the prompt box, attaching # references to add specific information from your solution like methods, classes, and files. You can even reference other prompt files to include common base instructions.\u003C/li\u003E\n\u003Cli\u003EThen, copy it from the prompt box into a markdown file, and save it with the .prompt.md file extension in the root of your repository in the \u003Ccode\u003E.github/prompts\u003C/code\u003E folder.\u003C/li\u003E\n\u003C/ol\u003E\n\u003Cp\u003ETip: You can even get Copilot\u0027s help in refining your prompt to be more specific\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/17.14.6_prompt_files.png\u0022 alt=\u0022Attaching a prompt file to your prompt\u0022 /\u003E\u003C/p\u003E\n\u003Ch3\u003EHow to Run Your Prompts\u003C/h3\u003E\n\u003Col\u003E\n\u003Cli\u003EStart typing \u003Ccode\u003E#prompt:\u003C/code\u003E to reference all the prompt files from your \u003Ccode\u003E.github/prompts\u003C/code\u003E folder directly in chat or click the \u2795 icon in the chat input to add it as context.\u003C/li\u003E\n\u003Cli\u003EAdd any additional information in the prompt box or just send the prompt!\u003C/li\u003E\n\u003C/ol\u003E\n\u003Cp\u003EGive it a try and speed up your AI workflows!\u003C/p\u003E\n",
    "Id": "prompt-files"
  },
  {
    "FileName": "url-context.md",
    "HtmlContent": "\u003Cp\u003EEver felt stuck when a topic doesn\u0027t seemed covered in Copilot\u0027s training data? Now you can reference URLs in Copilot Chat to provide more context for your questions, helping Copilot give you better responses.\u003C/p\u003E\n\u003Ch3\u003EReference URLs in your questions\u003C/h3\u003E\n\u003Cp\u003EPasting a URL in the prompt box allows Copilot to pull information from the web. This helps fill in the blanks when Copilot\u0027s training data doesn\u0027t cover a topic or when you want to reference a specific resource.\u003C/p\u003E\n\u003Cp\u003EFor example, you can ask Copilot to help you write a readme.md file based on the best practices on GitHub.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/18.0_url_context.png\u0022 alt=\u0022Chat input field with the prompt Help me qrite a readme.md file following these best practices and a url link\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EOne limitation to keep in mind is that Copilot can only reference the content of the public URL you provide. It won\u0027t be able to access any other resources or links on that page or pages behind authentication. Additionally, it can only pull in static html context, so if you reference a dynamic page, Copilot won\u0027t be able to access the content.\u003C/p\u003E\n",
    "Id": "url-context"
  },
  {
    "FileName": "adaptive-paste.md",
    "HtmlContent": "\u003Cp\u003EWhen you\u0027re pasting code into Visual Studio, there are often additional steps required to make it work seamlessly. Parameters may need to be adjusted to match those already used in your solution, or the syntax and styling may not align with the rest of your document.\u003C/p\u003E\n\u003Cp\u003EAdaptive paste is here to save you time and reduce effort by automatically adjusting the pasted code to fit the context of your existing code, minimizing the need for manual modifications. This feature also supports scenarios such as minor error fixes, code styling, formatting, human and code language translation, and fill-in-the-blank or continue-the-pattern tasks.\u003C/p\u003E\n\u003Cp\u003EFor instance, if you have a \u003Ccode\u003EMath\u003C/code\u003E class that implements the \u003Ccode\u003EIMath\u003C/code\u003E interface, copying and pasting the implementation for the \u003Ccode\u003ECeiling\u003C/code\u003E method into the same file will adapt it to implement the not yet implemented interface member \u003Ccode\u003EFloor\u003C/code\u003E.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/adaptive-paste-complete-interface.mp4\u0022 alt=\u0022Adapt pasted method to complete the interface\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EAdaptive paste is also helpful for programming language translation, see the below example where Copilot automatically helps translate the code from C\u002B\u002B to C#.\n\u003Cimg src=\u0022../media/CppToCsharp.mp4\u0022 alt=\u0022Adaptive paste translate code language\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EThe adaptive paste UI will appear when you perform a regular paste {KeyboardShortcut:Edit.Paste}. Simply press the \u003Ccode\u003ETAB\u003C/code\u003E key to request a suggestion, and you\u0027ll be shown a diff comparing the original pasted code with the adjusted code.\nYou can also trigger adaptive paste by first copying the relevant code, and hit \u003Ccode\u003EShift \u002B Alt \u002B V\u003C/code\u003E to paste it. This will automatically show the adaptive paste suggestion without needing to press \u003Ccode\u003ETAB\u003C/code\u003E. You can also go to \u003Cstrong\u003EEdit \u0026gt; Paste Special \u0026gt; Paste with Copilot\u003C/strong\u003E to trigger adaptive paste.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/PasteSpecial.png\u0022 alt=\u0022Paste Special Option from Edit Menu\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EAdaptive paste is now generally available in Visual Studio and automatically enabled for all users. Give it a try today! You can also change the option in \u003Cstrong\u003ETools \u0026gt; Options \u0026gt; GitHub \u0026gt; Copilot \u0026gt; Editor \u0026gt; Enable Adaptive Paste\u003C/strong\u003E.\u003C/p\u003E\n",
    "Id": "adaptive-paste"
  },
  {
    "FileName": "completions-on-demand.md",
    "HtmlContent": "\u003Cp\u003EWant to be more in control of code suggestions that pop up in your editor? Now in Visual Studio, you can opt out of automatic code suggestions and only receive suggestions when you explicitly request them.\u003C/p\u003E\n\u003Cp\u003EYou can configure the trigger for code suggestions in \u003Cstrong\u003EText Editor \u0026gt; Code Completions \u0026gt; General \u0026gt; Code Completions Invocation\u003C/strong\u003E. The default experience is \u003Cstrong\u003EAutomatic on Edit and Manual\u003C/strong\u003E and you can switch it to \u003Cstrong\u003EManual\u003C/strong\u003E to only receive suggestions when you explicitly request them by pressing \u003Ccode\u003EAlt \u002B ,\u003C/code\u003E or \u003Ccode\u003EAlt \u002B .\u003C/code\u003E. If there are multiple code suggestions available after requesting, you can cycle through them by pressing \u003Ccode\u003EAlt \u002B ,\u003C/code\u003E and \u003Ccode\u003EAlt \u002B .\u003C/code\u003E as well.\u003C/p\u003E\n\u003Cp\u003EWhen triggered, a thinking hint bar will appear at your cursor position to indicate that Copilot is generating code suggestions. If no suggestions returned, the hint bar will disappear after a few seconds. If suggestions are available, you can accept them by pressing \u003Ccode\u003ETab\u003C/code\u003E.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/CompletionsOnDemand.mp4\u0022 alt=\u0022Code Completions Manually Triggered\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003ENow, you can better customize your code suggestion experience in Visual Studio with this new setting. For example, when you want to be focused with minimum distraction, you can choose \u003Cstrong\u003EManual\u003C/strong\u003E and change it back to \u003Cstrong\u003EAutomatic on Edit and Manual\u003C/strong\u003E when you want to receive more suggestions effortlessly. Please share any feedback with us, and let us know any other ways you want to customize your Copilot code suggestions experience!\u003C/p\u003E\n",
    "Id": "completions-on-demand"
  },
  {
    "FileName": "context-updates.md",
    "HtmlContent": "\u003Cp\u003ECopilot Chat keeps getting smarter with improved context for your everyday tasks. You can expect better results when searching your code base, understanding dependencies with external symbols, and referencing specific lines in your code.\u003C/p\u003E\n\u003Ch3\u003EImproved code search\u003C/h3\u003E\n\u003Cp\u003ECopilot Chat\u0027s code search capabilities have been enhanced to provide more relevant results. This means you get more accurate suggestions because Copilot is even better at retrieving the right code snippets related to behaviors, concepts, or functionality described in natural language. These improvements are thanks to leveraging remote indexes of your codebases.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/18.0_semantic_search.png\u0022 alt=\u0022\u0022 /\u003E\u003C/p\u003E\n\u003Ch3\u003EAwareness of external symbols\u003C/h3\u003E\n\u003Cp\u003ENow, Copilot Chat can extend beyond your project to help you with external symbols brought in by your dependencies. With this broader scope of understanding, it can get you more effective solutions for your projects.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/18.0_external_symbols.png\u0022 alt=\u0022\u0022 /\u003E\u003C/p\u003E\n\u003Ch3\u003EBetter accuracy with line numbers\u003C/h3\u003E\n\u003Cp\u003EWhen you reference a specific line in your code, Copilot Chat will now provide more accurate responses. This means that when you ask Copilot look at a certain section of the code in natural language, it will be able to give you more precise information.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/18.0_line_numbers.png\u0022 alt=\u0022\u0022 /\u003E\u003C/p\u003E\n",
    "Id": "context-updates"
  },
  {
    "FileName": "did-you-mean.md",
    "HtmlContent": "\u003Cp\u003EEver forget the name of a file while coding? The new \u003Cstrong\u003EDid You Mean\u003C/strong\u003E feature in Visual Studio, powered by Copilot, is here to help. When you search using All-In-One Search and Copilot detects a better match than the top result - perhaps because of a typo or a fuzzy memory - it will suggest what you might have meant.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/DidYouMeanVideo.mp4\u0022 alt=\u0022Did You Mean in action\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EDid You Mean\u003C/strong\u003E works seamlessly with the All-In-One Search, which you can access by pressing \u003Ccode\u003ECtrl\u002BShift\u002BP\u003C/code\u003E. When you type in a search term, Copilot will analyze your input and suggest a more relevant term if it finds one that closely matches your intent. This feature can support you whether the search results are empty or when the top result is not what you intended.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/DidYouMeanEmpty.png\u0022 alt=\u0022Did You Mean with empty result\u0022 /\u003E\n\u003Cimg src=\u0022../media/DidYouMeanNonEmpty.png\u0022 alt=\u0022Did You Mean with irrelevant result\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EDid You Mean\u003C/strong\u003E speeds up your search experience by reducing the time spent correcting typos or trying to remember the correct name, making your search experience easier and more intuitive.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EDid You Mean (preview)\u003C/strong\u003E is now available in Visual Studio and automatically enabled for all applicable users. Currently, this feature works with public GitHub repositories, and we are actively working to expand its reach in future updates. Give it a try today and let us know what you think! You can also change the option in \u003Cstrong\u003ETools \u0026gt; Options \u0026gt; GitHub \u0026gt; Copilot \u0026gt; Search \u0026gt; Enable \u0027Did You Mean\u0027 Code Search Support in All-In-One Search (preview)\u003C/strong\u003E.\u003C/p\u003E\n",
    "Id": "did-you-mean"
  },
  {
    "FileName": "mermaid-chart-rendering.md",
    "HtmlContent": "\u003Cp\u003EVisual Studio now supports rendering Mermaid charts in both Markdown editor and Copilot Chat. This new feature allows you to visualize complex data structures, workflows, and relationships directly within your code editor. For example, you can create flowcharts and diagrams in a Markdown file using Mermaid syntax. In preview, they will be automatically rendered.\n\u003Cimg src=\u0022../media/mermaidchart.png\u0022 alt=\u0022Mermaid Chart Rendering in Markdown\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003ESimilarly, you can ask Copilot Chat to generate charts and diagrams for you to help explain complex codebases or logic with visual aids. The returned Mermaid markdown syntax will be automatically rendered in the chat window.\u003C/p\u003E\n\u003Cp\u003EPlease give it a try and share any feedback you have!\u003C/p\u003E\n",
    "Id": "mermaid-chart-rendering"
  },
  {
    "FileName": "url-context.md",
    "HtmlContent": "\u003Cp\u003EEver felt stuck when a topic doesn\u0027t seemed covered in Copilot\u0027s training data? Now you can reference URLs in Copilot Chat to provide more context for your questions, helping Copilot give you better responses.\u003C/p\u003E\n\u003Ch3\u003EReference URLs in your questions\u003C/h3\u003E\n\u003Cp\u003EPasting a URL in the prompt box allows Copilot to pull information from the web. This helps fill in the blanks when Copilot\u0027s training data doesn\u0027t cover a topic or when you want to reference a specific resource.\u003C/p\u003E\n\u003Cp\u003EFor example, you can ask Copilot to help you write a readme.md file based on the best practices on GitHub.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\u0022../media/18.0_url_context.png\u0022 alt=\u0022Chat input field with the prompt Help me qrite a readme.md file following these best practices and a url link\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003EOne limitation to keep in mind is that Copilot can only reference the content of the public URL you provide. It won\u0027t be able to access any other resources or links on that page or pages behind authentication. Additionally, it can only pull in static html context, so if you reference a dynamic page, Copilot won\u0027t be able to access the content.\u003C/p\u003E\n",
    "Id": "url-context"
  }
]